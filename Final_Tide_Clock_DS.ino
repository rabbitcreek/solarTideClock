/*  Tide_calculator.ino 
 Copyright (c) 2015 Luke Miller
This code calculates the current tide height for the 
pre-programmed site. It requires a real time clock
(DS1307 or DS3231 chips) to generate a time for the calculation.
The site is set by the name of the included library (see line 44 below)

Written under version 1.6.4 of the Arduino IDE.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or 
(at your option) any later version.

This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see http://www.gnu.org/licenses/

 The harmonic constituents used here were originally derived from 
 the Center for Operational Oceanic Products and Services (CO-OPS),
 National Ocean Service (NOS), National Oceanic and Atmospheric 
 Administration, U.S.A.
 The data were originally processed by David Flater for use with XTide,
 available at http://www.flaterco.com/xtide/files.html
As with XTide, the predictions generated by this program should 
NOT be used for navigation, and no accuracy or warranty is given
or implied for these tide predictions. The chances are pretty good
that the tide predictions generated here are completely wrong.
It is highly recommended that you verify the output of these predictions
against the relevant NOAA tide predictions online.
*/ 
//--------------------------------------------------------------
//Initial setup
//Header files for talking to real time clock
#include <Wire.h> // Required for RTClib
#include <SPI.h> // Required for RTClib to compile properly
#include <RTClib.h> // From https://github.com/millerlp/RTClib
#include <Servo.h> 
# define donePin 10 //TPL 5111 has to turn high to turn off power
Servo myservo; 
// Real Time Clock setup
//RTC_DS1307 RTC;  // Uncomment when using this chip
 RTC_DS3231 RTC; // Uncomment when using this chip
 float tidalDifference=0;
 float pastResult;
 int slope;
 int dS=0;
 int i=0;
 bool gate=1;
// Tide calculation library setup.
// Change the library name here to predict for a different site.
#include "TidelibSitkaBaronofIslandSitkaSoundAlaska.h"
// Other sites available at http://github.com/millerlp/Tide_calculator
TideCalc myTideCalc; // Create TideCalc object called myTideCalc

int currMinute; // Keep track of current minute value in main loop
float results; // results holds the output from the tide calc. Units = ft.
//*******************************************************************
// Welcome to the setup loop
void setup(void)
{
  Wire.begin(); 
  pinMode(donePin,OUTPUT);
  digitalWrite(donePin,LOW);//sets pin output to TPL low initially
 
  RTC.begin();
  //RTC.adjust(DateTime(F(__DATE__), F(__TIME__)));//unmask this if you havnt set up your RTC
  // For debugging output to serial monitor
  Serial.begin(9600); 
  //*************************************
  DateTime now = RTC.now(); // Get current time from clock
  
  //Serial.println("Calculating tides for: ");
  //Serial.print(myTideCalc.returnStationID());
  //Serial.print(" ");
  //Serial.println(myTideCalc.returnStationIDnumber());
  
  pastResult=myTideCalc.currentTide(now);
  if((now.month()>3&&now.month()<11)||(now.month()==3&&now.day()>11)||(now.month()==11&&now.day()<6))dS=1;
  //That statement adjusts for daylight savings time--you may need to change this depending on where you live
  while(1){ //This loop asks when the next high or low tide is by checking 15 min intervals from current time
    i++;
    DateTime future(now.unixtime()+i*15*60L);
    results=myTideCalc.currentTide(future);
    tidalDifference=results-pastResult;
    if (gate){
      if(tidalDifference<0)slope=0;//if slope is positive--rising tide--slope neg falling tide
      else slope=1;
      gate=0;
   }
   if(tidalDifference>0&&slope==0){
      servoTime( future,slope,dS);
      gate=1;   
   }
    else if(tidalDifference<0&&slope==1){
    servoTime( future,slope,dS);
    gate=1;
   }
  //Serial.print(slope);
  //Serial.println("slope");
  //Serial.print(gate);
  //Serial.println("gate");
  pastResult=results;
  
  }
}  // End of setup loop

//********************************************
// Welcome to the main loop--nothing to do here we arnt looping only figuring the next high or low tide
void loop(void)
{
   
} // End of main loop 



//*************************************
void servoTime(DateTime future,int highLow,int dS) {
  delay(5000);
  
  int hourFuture=future.hour();
  hourFuture=hourFuture+dS;
  int servoWrite=0;
  if(highLow){
     Serial.println("I found HIGH tide");
  }
  else Serial.println("I found LOW tide");
 
  Serial.print(future.year(), DEC);
  Serial.print("/");
  Serial.print(future.month(), DEC); 
  Serial.print("/");
  Serial.print(future.day(), DEC); 
  Serial.print("  ");
   Serial.print(future.hour(), DEC); 
  Serial.print(":");
  if (future.minute() < 10) {
    Serial.print("0");
    Serial.print(future.minute());
   }
  else if (future.minute() >= 10) {
    Serial.print(future.minute());
  }
  Serial.print(":");
  if (future.second() < 10) {
    Serial.print("0");
    Serial.println(future.second());
  }
  else if (future.second() >= 10) {
    Serial.println(future.second());
  }
  
  if(future.hour()>11)hourFuture=hourFuture-12;
  if(highLow==0)hourFuture=hourFuture+6;//this uses only one side to pointer to set high and low tides
  if(hourFuture>11)hourFuture=hourFuture-12;
  servoWrite=(hourFuture*10)+((future.minute()*10)/60);
  Serial.print(servoWrite);
  Serial.print("servoWrite");
  servoWrite=map(servoWrite,0,120,600,2600);//each servo is different--these are the micorseconds limits for mine
  servoWrite=constrain(servoWrite,600,2600);
  myservo.attach(11,400,2600);//important if you want your servo to do a maximum 180 degrees--most have their querks
  delay(200);
  myservo.writeMicroseconds(servoWrite);
  delay(800);
  //myservo.detach();
  //delay(1000);
 while(1){    //this sets up the termination of the program by allerting the TPL 5111 to turn the processor off
    digitalWrite(donePin, HIGH);
    delay(1);
    digitalWrite(donePin, LOW);
    delay(1);
 }
 
  
} // End of printTime function
